// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'model/chat_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 6412060380571589125),
      name: 'ChatSession',
      lastPropertyId: const IdUid(2, 6559707706064682949),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7000643486693852116),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6559707706064682949),
            name: 'name',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(1, 986120422415421405),
            name: 'messages',
            targetId: const IdUid(2, 6823399755781780845))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 6823399755781780845),
      name: 'ChatMessage',
      lastPropertyId: const IdUid(3, 8722626962968777729),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6568101848183323789),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4152669219768404118),
            name: 'isChatGPT',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8722626962968777729),
            name: 'message',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(2, 6823399755781780845),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(1, 986120422415421405),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    ChatSession: EntityDefinition<ChatSession>(
        model: _entities[0],
        toOneRelations: (ChatSession object) => [],
        toManyRelations: (ChatSession object) =>
            {RelInfo<ChatSession>.toMany(1, object.id): object.messages},
        getId: (ChatSession object) => object.id,
        setId: (ChatSession object, int id) {
          object.id = id;
        },
        objectToFB: (ChatSession object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ChatSession()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '');
          InternalToManyAccess.setRelInfo(
              object.messages,
              store,
              RelInfo<ChatSession>.toMany(1, object.id),
              store.box<ChatSession>());
          return object;
        }),
    ChatMessage: EntityDefinition<ChatMessage>(
        model: _entities[1],
        toOneRelations: (ChatMessage object) => [],
        toManyRelations: (ChatMessage object) => {},
        getId: (ChatMessage object) => object.id,
        setId: (ChatMessage object, int id) {
          object.id = id;
        },
        objectToFB: (ChatMessage object, fb.Builder fbb) {
          final messageOffset = fbb.writeString(object.message);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addBool(1, object.isChatGPT);
          fbb.addOffset(2, messageOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ChatMessage()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..isChatGPT =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 6, false)
            ..message = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 8, '');

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [ChatSession] entity fields to define ObjectBox queries.
class ChatSession_ {
  /// see [ChatSession.id]
  static final id =
      QueryIntegerProperty<ChatSession>(_entities[0].properties[0]);

  /// see [ChatSession.name]
  static final name =
      QueryStringProperty<ChatSession>(_entities[0].properties[1]);

  /// see [ChatSession.messages]
  static final messages =
      QueryRelationToMany<ChatSession, ChatMessage>(_entities[0].relations[0]);
}

/// [ChatMessage] entity fields to define ObjectBox queries.
class ChatMessage_ {
  /// see [ChatMessage.id]
  static final id =
      QueryIntegerProperty<ChatMessage>(_entities[1].properties[0]);

  /// see [ChatMessage.isChatGPT]
  static final isChatGPT =
      QueryBooleanProperty<ChatMessage>(_entities[1].properties[1]);

  /// see [ChatMessage.message]
  static final message =
      QueryStringProperty<ChatMessage>(_entities[1].properties[2]);
}
